generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model bookings {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id  String?        @db.Uuid
  service_id String?        @db.Uuid
  start_time DateTime?      @db.Timestamptz(6)
  end_time   DateTime?      @db.Timestamptz(6)
  notes      String?
  status     booking_status @default(confirmed)
  created_at DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updated_at DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  clients    clients?       @relation(fields: [client_id], references: [id], onUpdate: NoAction)
  services   services?      @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payments   payments[]

  @@unique([client_id, service_id, start_time], map: "bookings_client_service_start_unique")
}

model bookings_history {
  id          String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  client_id   String?        @db.Uuid
  start_time  DateTime?      @db.Timestamptz(6)
  end_time    DateTime?      @db.Timestamptz(6)
  service_id  String?        @db.Uuid
  notes       String?
  status      booking_status
  created_at  DateTime       @db.Timestamptz(6)
  updated_at  DateTime       @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  change_type change_type
  booking_id  String?        @db.Uuid
}

model clients {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name  String?    @default("Unknown")
  email      String?
  phone      String?
  notes      String?
  created_at DateTime   @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  bookings   bookings[]

  @@index([email(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([full_name(ops: raw("gin_trgm_ops"))], type: Gin)
  @@index([phone(ops: raw("gin_trgm_ops"))], type: Gin)
}

model payments {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  booking_id  String?          @db.Uuid
  amount      Decimal          @db.Decimal(10, 2)
  method      payment_methods?
  refunded    Decimal?         @default(0) @db.Decimal
  paid_at     DateTime?        @db.Timestamptz(6)
  paid        Boolean          @default(false)
  refunded_at DateTime?        @db.Timestamptz(6)
  client_id   String?          @db.Uuid
  bookings    bookings?        @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([booking_id, method], map: "payments_booking_method_unique")
}

model payments_log {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  payment_id   String?     @db.Uuid
  change_type  change_type
  old_data     Json?
  new_data     Json?
  performed_at DateTime    @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  performed_by String?     @db.Uuid
}

model services {
  id                       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                     String
  created_at               DateTime?  @default(now()) @db.Timestamp(6)
  standard_duration_prices Json?
  bookings                 bookings[]
}

model therapists {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  full_name  String
  email      String?
  phone      String?
  notes      String?
  created_at DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  active     Boolean  @default(false)
}

enum booking_status {
  confirmed
  cancelled
  completed
}

enum change_type {
  INSERT
  UPDATE
  DELETE
}

enum payment_methods {
  cash
  credit_card @map("credit card")
}
